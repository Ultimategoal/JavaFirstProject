package dao;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.ParseConversionEvent;

import util.JDBCUtil;
import util.ScanUtil;
import controller.Controller;

public class ReviewDao {

	private ReviewDao(){}
	private static ReviewDao instance;
	public static ReviewDao getInstance(){
		if(instance == null){
			instance = new ReviewDao();
		}
		return instance;
	}
	
	JDBCUtil jdbc = JDBCUtil.getInstance();
	SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd hh:mm");
	
	int deleteInput;
	
	
	public List<Map<String, Object>> selectReview(){
		String sql = "SELECT * FROM REVIEW ORDER BY RELEASE_DATE DESC";
		
		//ÏòÅÌôî Ï†úÎ™©ÎèÑ Í∞ôÏù¥ Î≥¥Í≥† Ïã∂ÏúºÎ©¥ ÏïÑÎûò Íµ¨Î¨∏ ÏÇ¨Ïö©
//		String sql = "SELECT R.REVIEW_CODE, R.MOVIE_CODE, M.MOVIE_SJ, R.USID, R.AVRG_SCORE, R.RELEASE_DATE, R.REVIEW_SJ, R.REVIEW_CN FROM REVIEW R, MOVIE M WHERE R.MOVIE_CODE = M.MOVIE_CODE ORDER BY R.RELEASE_DATE DESC";
		
		return jdbc.selectList(sql);
	}
	
	//Í∏Ä Îì±Î°ù
	public int insertReview(){
		String sql = "INSERT INTO REVIEW VALUES((SELECT TRIM(NVL(MAX(TO_CHAR(REVIEW_CODE, '999')),0)) + 1 FROM REVIEW), ?, ?, ?, SYSDATE, ?, ?)";
		
//		String sql = "SELECT R.REVIEW_CODE, R.MOVIE_CODE, M.MOVIE_SJ, R.USID, R.AVRG_SCORE, R.RELEASE_DATE, R.REVIEW_SJ, R.REVIEW_CN FROM REVIEW R, MOVIE M WHERE R.MOVIE_CODE = M.MOVIE_CODE AND R.REVIEW_CODE = ? ORDER BY R.RELEASE_DATE DESC";
		
		List<Object> param = new ArrayList<>();
		System.out.print("üé¨ÏòÅÌôî ÏΩîÎìúÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî>"); Object input = ScanUtil.nextLine();  param.add(input);
		System.out.print("üé¨Î¶¨Î∑∞ Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); input = ScanUtil.nextLine(); 		  param.add(input);
		System.out.print("üé¨ÌèâÏ†êÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>");   boolean flag = true; while(flag){
																			input = ScanUtil.nextLine();
																			if(Integer.parseInt((String) input)<0||Integer.parseInt((String) input)>10){
																				System.out.println("0Î∂ÄÌÑ∞ 10ÍπåÏßÄ ÏûÖÎ†•Í∞ÄÎä•Ìï©ÎãàÎã§. Îã§Ïãú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
																			}
																			else{
																				flag = false;
																			}
																	} 
																	param.add(input);
		System.out.print("üé¨ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>");     input = ScanUtil.nextLine(); 		  param.add(input);
		param.add(Controller.LoginUser.get("USID"));
		
		return jdbc.update(sql, param);
	}
	//Î¶¨Î∑∞ Í∏ÄÎ≥¥Í∏∞
	public Map<String, Object> selectSearchReviewOne(){
//		String sql = "SELECT REVIEW_CODE, USID, AVRG_SCORE, RELEASE_DATE, REVIEW_CN FROM REVIEW WHERE REVIEW_CODE = ? ORDER BY RELEASE_DATE DESC";
		
		String sql = "SELECT R.REVIEW_CODE, R.MOVIE_CODE, M.MOVIE_SJ, R.USID, R.AVRG_SCORE, R.RELEASE_DATE, R.REVIEW_CN FROM REVIEW R, MOVIE M WHERE R.MOVIE_CODE = M.MOVIE_CODE"
				+ " AND R.REVIEW_CODE = ? ORDER BY R.RELEASE_DATE DESC";
		
//		String sql = "SELECT C.COMMENT_CN, R.REVIEW_CODE, R.REVIEW_CODE, R.MOVIE_CODE, M.MOVIE_SJ, R.USID, R.AVRG_SCORE,"
//				+ " R.RELEASE_DATE, R.REVIEW_CN FROM COMMENTREVIEW C INNER JOIN REVIEW R ON(C.REVIEW_CODE = R.REVIEW_CODE)"
//				+ " INNER JOIN MOVIE M ON(R.MOVIE_CODE = M.MOVIE_CODE) WHERE R.REVIEW_CODE = ? ORDER BY R.RELEASE_DATE DESC";
		
		List<Object> param = new ArrayList<>();
		System.out.print("üé¨ÏûëÏÑ± Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); int input = ScanUtil.nextInt(); param.add(input);
		return jdbc.selectOne(sql, param);
	}
	
	//ÏïÑÏù¥ÎîîÎ°ú Í∏Ä Î≥¥Í∏∞(ÌïòÎÇòÎßå)
	public List<Map<String, Object>> selectReviewOne(){
		String sql = "SELECT REVIEW_CODE, REVIEW_SJ, REVIEW_CN, AVRG_SCORE, RELEASE_DATE, USID FROM REVIEW WHERE USID = ? ORDER BY RELEASE_DATE DESC";
		
		List<Object> param = new ArrayList<>();
		System.out.print("üé¨ÏûëÏÑ±Ïûê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); Object input = ScanUtil.nextLine(); param.add(input);
		return jdbc.selectList(sql, param);
	}
	
	//Î¶¨Î∑∞ Í∏Ä ÏàòÏ†ï
	public int updateReview(){
		String sql = "UPDATE REVIEW SET REVIEW_SJ = ?, REVIEW_CN = ? WHERE REVIEW_CODE = ? AND USID = ?";
		
		List<Object> param = new ArrayList<>();
		System.out.print("üé¨ÏàòÏ†ïÌïòÍ≥† Ïã∂ÏùÄ Î≥∏Ïù∏ Í≤åÏãúÍ∏Ä Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); Object  input1 = ScanUtil.nextLine();
		System.out.print("üé¨ÏàòÏ†ïÌï† Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); 		 Object input2 = ScanUtil.nextLine();
		System.out.print("üé¨ÏàòÏ†ïÌï† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); 		 Object input3 = ScanUtil.nextLine();
		param.add(input2); param.add(input3); param.add(input1);
		param.add(Controller.LoginUser.get("USID"));
		
		
		return jdbc.update(sql, param);
	}
	
	//Î¶¨Î∑∞ Í∏Ä ÏÇ≠Ï†ú
	public int deleteReview(){
		String sql = "DELETE FROM REVIEW WHERE USID = ? AND REVIEW_CODE = ?";
		
		List<Object> param = new ArrayList<>();
		param.add(Controller.LoginUser.get("USID"));
		System.out.print("üé¨ÏûëÏÑ± Î≤àÌò∏Î•º Ìïú Î≤à Îçî ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî>"); deleteInput = ScanUtil.nextInt(); param.add(deleteInput);
		return jdbc.update(sql, param);
	}
	
	//ÎÇ¥Í∞Ä Ïò¨Î¶∞ Î¶¨Î∑∞Í∏Ä Î≥¥Í∏∞
	public List<Map<String, Object>> selectMyReview(){
		String sql = "SELECT REVIEW_CODE, MOVIE_CODE, REVIEW_SJ, REVIEW_CN, AVRG_SCORE, RELEASE_DATE, USID FROM REVIEW WHERE USID = ? ORDER BY RELEASE_DATE DESC";
		
		List<Object> param = new ArrayList<>();
		param.add(Controller.LoginUser.get("USID"));
		return jdbc.selectList(sql, param);
	}
	
	//ÏòÅÌôî ÏΩîÎìú Î≥¥Í∏∞
	public List<Map<String, Object>> movieChoice(){
		String sql = "SELECT DISTINCT R.MOVIE_CODE,  M.MOVIE_SJ FROM REVIEW R, MOVIE M WHERE R.MOVIE_CODE = M.MOVIE_CODE ORDER BY R.MOVIE_CODE";
		
		return jdbc.selectList(sql);
	}
	
	//ÏòÅÌôî ÏΩîÎìúÎ°ú Ìï¥Îãπ ÏòÅÌôî Î¶¨Î∑∞Î≥¥Í∏∞
	public List<Map<String, Object>> movieSelect(){
		String sql = "SELECT REVIEW_CODE, USID, AVRG_SCORE, RELEASE_DATE, REVIEW_SJ FROM REVIEW WHERE MOVIE_CODE = ? ORDER BY RELEASE_DATE DESC";
		
		List<Object> param = new ArrayList<>();
		System.out.print("üé¨Ìï¥ÎãπÌïòÎäî ÏòÅÌôîÏùò ÏΩîÎìúÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî>"); Object input = ScanUtil.nextLine(); param.add(input);
		
		return jdbc.selectList(sql, param);
	}
	
	//ÏÇ≠Ï†úÌï† Îïå ÏïÑÏù¥Îîî Îß§Ïπ≠
	public Map<String, Object> deleteUser(){
		String sql = "SELECT USID FROM REVIEW WHERE REVIEW_CODE = ?";
		
		List<Object> param = new ArrayList<>();
		param.add(deleteInput);
		
		return jdbc.selectOne(sql, param);
	}
	
//	public int commentReview(){
//		String sql = "INSERT INTO COMMENTREVIEW VALUES((SELECT TRIM(NVL(MAX(TO_CHAR(COMMENT_CODE, '999')),0)) + 1 FROM COMMENTREVIEW), ?, ?)";
//		
//		List<Object> param = new ArrayList<>();
//		System.out.print("Í≤åÏãúÍ∏Ä Î≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"); Object input = ScanUtil.nextLine(); param.add(input);
//		System.out.print("ÏûëÏÑ±Ìï† ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"); input = ScanUtil.nextLine(); param.add(input);
//		
//		return jdbc.update(sql, param);
//	}
	
	//ÏòÅÌôî ÌèâÍ∑† ÌèâÏ†ê
	public Map<String, Object> avrgScoreOne(){
		String sql = "SELECT DISTINCT SUMM/AVRG FROM REVIEW, (SELECT SUM(AVRG_SCORE) SUMM FROM REVIEW WHERE MOVIE_CODE = ?),"
				+ " (SELECT COUNT(AVRG_SCORE) AVRG FROM REVIEW WHERE MOVIE_CODE = ?)";
		
		List<Object> param = new ArrayList<>();
		System.out.println("üé¨ÏòÅÌôîÎ•º ÏÑ†ÌÉùÌïòÎ©¥ ÌèâÏ†êÏù¥ Î≥¥ÏûÖÎãàÎã§.");
		Object input = ScanUtil.nextLine();
		param.add(input);
		param.add(input);
		return jdbc.selectOne(sql, param);
		
	}
	
	//Ï†ÑÏ≤¥ ÏòÅÌôî ÌèâÍ∑† ÌèâÏ†ê
	public List<Map<String, Object>> avrgScore(){
		String sql = "SELECT R.MOVIE_CODE, M.MOVIE_SJ, TO_NUMBER(RTRIM(TO_CHAR(SUM(R.AVRG_SCORE)/COUNT(R.AVRG_SCORE),'FM90D00'),'.')) TOTAL FROM REVIEW R INNER JOIN MOVIE M ON(R.MOVIE_CODE = M.MOVIE_CODE) GROUP BY R.MOVIE_CODE, M.MOVIE_SJ ORDER BY TOTAL DESC";
		
		return jdbc.selectList(sql);
	}
	
	
	
	//Ï°∞Ïù∏Ìï¥ÏÑú ÏòÅÌôîÏù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞
}